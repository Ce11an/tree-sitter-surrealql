==========================================
Create a RECORD access method for accounts
==========================================

DEFINE ACCESS account ON NAMESPACE TYPE RECORD
	SIGNUP ( CREATE user SET email = $email, pass = crypto::argon2::generate($pass) )
	SIGNIN ( SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(pass, $pass) )
	DURATION FOR TOKEN 15m, FOR SESSION 12h;

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_access_statement
          (keyword_define)
          (keyword_access)
          (identifier)
          (keyword_on)
          (keyword_namespace)
          (keyword_type)
          (keyword_record)
          (keyword_signup)
          (create_statement
            (keyword_create)
            (create_target
              (identifier))
            (set_clause
              (keyword_set)
              (field_assignment
                (identifier)
                (assignment_operator)
                (value
                  (base_value
                    (variable_name))))
              (field_assignment
                (identifier)
                (assignment_operator)
                (value
                  (function_call
                    (function_name)
                    (argument_list
                      (value
                        (base_value
                          (variable_name)))))))))
          (keyword_signin)
          (select_statement
            (select_clause
              (keyword_select)
              (inclusive_predicate))
            (from_clause
              (keyword_from)
              (value
                (base_value
                  (identifier)))
              (where_clause
                (keyword_where)
                (value
                  (binary_expression
                    (value
                      (binary_expression
                        (value
                          (base_value
                            (identifier)))
                        (operator)
                        (value
                          (base_value
                            (variable_name)))))
                    (operator
                      (keyword_and))
                    (value
                      (function_call
                        (function_name)
                        (argument_list
                          (value
                            (base_value
                              (identifier)))
                          (value
                            (base_value
                              (variable_name)))))))))))
          (duration_clause
            (keyword_duration)
            (keyword_for)
            (keyword_token)
            (duration
              (duration_part))
            (keyword_for)
            (keyword_session)
            (duration
              (duration_part))))))
    (semi_colon)))

=================================================================
Define bearer access method to generate API keys for system users
=================================================================

DEFINE ACCESS api ON DATABASE TYPE BEARER FOR USER DURATION FOR GRANT 10d;

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_access_statement
          (keyword_define)
          (keyword_access)
          (identifier)
          (keyword_on)
          (keyword_database)
          (keyword_type)
          (keyword_bearer)
          (keyword_for)
          (keyword_user)
          (duration_clause
            (keyword_duration)
            (keyword_for)
            (keyword_grant)
            (duration
              (duration_part))))))
    (semi_colon)))

=================================================================
Define bearer access method to generate API keys for record users
=================================================================

DEFINE ACCESS api ON ROOT TYPE BEARER FOR RECORD DURATION FOR GRANT 10d;

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_access_statement
          (keyword_define)
          (keyword_access)
          (identifier)
          (keyword_on)
          (keyword_root)
          (keyword_type)
          (keyword_bearer)
          (keyword_for)
          (keyword_record)
          (duration_clause
            (keyword_duration)
            (keyword_for)
            (keyword_grant)
            (duration
              (duration_part))))))
    (semi_colon)))

=========================
Set the name of the token
=========================

DEFINE ACCESS token_name
  -- Use this token provider for database authentication
  ON SCOPE
  -- Specify the type of access being defined
  TYPE JWT
  -- Specify the cryptographic signature algorithm used to verify the token
  ALGORITHM HS512
  -- Specify the symmetric key used to sign and verify the authenticity of the token
  KEY "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8";

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_access_statement
          (keyword_define)
          (keyword_access)
          (identifier)
          (comment)
          (keyword_on)
          (keyword_scope)
          (comment)
          (keyword_type)
          (keyword_jwt)
          (comment)
          (keyword_algorithm)
          (identifier)
          (comment)
          (keyword_key)
          (string))))
    (semi_colon)))

========================================
Define access with authentication clause
========================================

DEFINE ACCESS user ON DATABASE TYPE JWT
ALGORITHM HS512 KEY "sNSYneezcr8kqphfOC6NwwraUHJCVAt0XjsRSNmssBaBRh3WyMa9TRfq8ST7fsU2H2kGiOpU4GbAF1bCiXmM1b3JGgleBzz7rsrz6VvYEM4q3CLkcO8CMBIlhwhzWmy8"
AUTHENTICATE {
  IF $token.iss != "surrealdb-test" { THROW "Invalid token issuer" };
  IF type::is::array($token.aud) {
    IF "surrealdb-test" NOT IN $token.aud { THROW "Invalid token audience" }
  } ELSE {
    IF $token.aud IS NOT "surrealdb-test" { THROW "Invalid token audience" }
  };
}
DURATION FOR SESSION 2h;

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_access_statement
          (keyword_define)
          (keyword_access)
          (identifier)
          (keyword_on)
          (keyword_database)
          (keyword_type)
          (keyword_jwt)
          (keyword_algorithm)
          (identifier)
          (keyword_key)
          (string)
          (keyword_authenticate)
          (block
            (expressions
              (expression
                (subquery_statement
                  (if_statement
                    (keyword_if)
                    (value
                      (binary_expression
                        (value
                          (path
                            (base_value
                              (variable_name))
                            (path_element
                              (subscript
                                (identifier)))))
                        (operator
                          (binary_operator))
                        (value
                          (base_value
                            (string)))))
                    (block
                      (expressions
                        (expression
                          (primary_statement
                            (throw_statement
                              (keyword_throw)
                              (value
                                (base_value
                                  (string)))))))))))
              (semi_colon)
              (expression
                (subquery_statement
                  (if_statement
                    (keyword_if)
                    (value
                      (function_call
                        (function_name)
                        (argument_list
                          (value
                            (path
                              (base_value
                                (variable_name))
                              (path_element
                                (subscript
                                  (identifier))))))))
                    (block
                      (expressions
                        (expression
                          (subquery_statement
                            (if_statement
                              (keyword_if)
                              (value
                                (binary_expression
                                  (value
                                    (base_value
                                      (string)))
                                  (operator
                                    (keyword_not)
                                    (keyword_in))
                                  (value
                                    (path
                                      (base_value
                                        (variable_name))
                                      (path_element
                                        (subscript
                                          (identifier)))))))
                              (block
                                (expressions
                                  (expression
                                    (primary_statement
                                      (throw_statement
                                        (keyword_throw)
                                        (value
                                          (base_value
                                            (string)))))))))))))
                    (else_clause
                      (keyword_else)
                      (block
                        (expressions
                          (expression
                            (subquery_statement
                              (if_statement
                                (keyword_if)
                                (value
                                  (binary_expression
                                    (value
                                      (path
                                        (base_value
                                          (variable_name))
                                        (path_element
                                          (subscript
                                            (identifier)))))
                                    (operator
                                      (keyword_is)
                                      (keyword_not))
                                    (value
                                      (base_value
                                        (string)))))
                                (block
                                  (expressions
                                    (expression
                                      (primary_statement
                                        (throw_statement
                                          (keyword_throw)
                                          (value
                                            (base_value
                                              (string)))))))))))))))))
              (semi_colon)))
          (duration_clause
            (keyword_duration)
            (keyword_for)
            (keyword_session)
            (duration
              (duration_part))))))
    (semi_colon)))
