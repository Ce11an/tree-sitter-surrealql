=======================
Define a basic function
=======================

DEFINE FUNCTION fn::greet($name: string) {
	RETURN "Hello, " + $name + "!";
};

RETURN fn::greet("Tobie");

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (custom_function_name)
          (param_list
            (variable_name)
            (type
              (type_name)))
          (block
            (expressions
              (expression
                (subquery_statement
                  (return_statement
                    (return_clause
                      (keyword_return)
                      (value
                        (binary_expression
                          (value
                            (binary_expression
                              (value
                                (base_value
                                  (string)))
                              (operator
                                (binary_operator))
                              (value
                                (base_value
                                  (variable_name)))))
                          (operator
                            (binary_operator))
                          (value
                            (base_value
                              (string)))))))))
              (semi_colon))))))
    (semi_colon)
    (expression
      (subquery_statement
        (return_statement
          (return_clause
            (keyword_return)
            (value
              (function_call
                (custom_function_name)
                (argument_list
                  (value
                    (base_value
                      (string))))))))))
    (semi_colon)))

=========================
Define a complex function
=========================

DEFINE FUNCTION fn::relation_exists(
	$in: record,
	$tb: string,
	$out: record
) {
	-- Check if a relation exists between the two nodes.
	LET $results = SELECT VALUE id FROM type::table($tb) WHERE in = $in AND out = $out;
	-- Return true if a relation exists, false otherwise
    RETURN array::len($results) > 0;
};

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (custom_function_name)
          (param_list
            (variable_name)
            (type
              (type_name))
            (variable_name)
            (type
              (type_name))
            (variable_name)
            (type
              (type_name)))
          (block
            (comment)
            (expressions
              (expression
                (subquery_statement
                  (let_statement
                    (keyword_let)
                    (variable_name)
                    (subquery_statement
                      (select_statement
                        (select_clause
                          (keyword_select)
                          (keyword_value)
                          (predicate
                            (value
                              (base_value
                                (identifier)))))
                        (from_clause
                          (keyword_from)
                          (value
                            (function_call
                              (function_name)
                              (argument_list
                                (value
                                  (base_value
                                    (variable_name))))))
                          (where_clause
                            (keyword_where)
                            (value
                              (binary_expression
                                (value
                                  (binary_expression
                                    (value
                                      (binary_expression
                                        (value
                                          (base_value
                                            (identifier)))
                                        (operator)
                                        (value
                                          (base_value
                                            (variable_name)))))
                                    (operator
                                      (keyword_and))
                                    (value
                                      (base_value
                                        (identifier)))))
                                (operator)
                                (value
                                  (base_value
                                    (variable_name))))))))))))
              (semi_colon)
              (comment)
              (expression
                (subquery_statement
                  (return_statement
                    (return_clause
                      (keyword_return)
                      (value
                        (binary_expression
                          (value
                            (function_call
                              (function_name)
                              (argument_list
                                (value
                                  (base_value
                                    (variable_name))))))
                          (operator)
                          (value
                            (base_value
                              (number
                                (int))))))))))
              (semi_colon))))))
    (semi_colon)))

==================
Optional arguments
==================

DEFINE FUNCTION fn::last_option($required: number, $optional: option<number>) {
	RETURN {
		required_present: type::is::number($required),
		optional_present: type::is::number($optional)
	}
};

RETURN fn::last_option(1, 2);
{
	required_present: true,
	optional_present: true
};

RETURN fn::last_option(1);
{
	required_present: true,
	optional_present: false
};

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (custom_function_name)
          (param_list
            (variable_name)
            (type
              (type_name))
            (variable_name)
            (type
              (parameterized_type
                (type_name)
                (type
                  (type_name)))))
          (block
            (expressions
              (expression
                (subquery_statement
                  (return_statement
                    (return_clause
                      (keyword_return)
                      (value
                        (base_value
                          (object
                            (object_content
                              (object_property
                                (object_key)
                                (value
                                  (function_call
                                    (function_name)
                                    (argument_list
                                      (value
                                        (base_value
                                          (variable_name)))))))
                              (object_property
                                (object_key)
                                (value
                                  (function_call
                                    (function_name)
                                    (argument_list
                                      (value
                                        (base_value
                                          (variable_name))))))))))))))))))))
    (semi_colon)
    (expression
      (subquery_statement
        (return_statement
          (return_clause
            (keyword_return)
            (value
              (function_call
                (custom_function_name)
                (argument_list
                  (value
                    (base_value
                      (number
                        (int))))
                  (value
                    (base_value
                      (number
                        (int)))))))))))
    (semi_colon)
    (expression
      (value
        (base_value
          (object
            (object_content
              (object_property
                (object_key)
                (value
                  (base_value
                    (keyword_true))))
              (object_property
                (object_key)
                (value
                  (base_value
                    (keyword_true)))))))))
    (semi_colon)
    (expression
      (subquery_statement
        (return_statement
          (return_clause
            (keyword_return)
            (value
              (function_call
                (custom_function_name)
                (argument_list
                  (value
                    (base_value
                      (number
                        (int)))))))))))
    (semi_colon)
    (expression
      (value
        (base_value
          (object
            (object_content
              (object_property
                (object_key)
                (value
                  (base_value
                    (keyword_true))))
              (object_property
                (object_key)
                (value
                  (base_value
                    (keyword_false)))))))))
    (semi_colon)))

===================
Recursive functions
===================

DEFINE FUNCTION fn::relate_all($records: array<record>) {
  IF $records.len() < 2 {
      -- Don't do anything, ending the recursion
  }  ELSE {
      LET $first = $records[0];
      LET $remainder = array::slice($records, 1);
      FOR $counterpart IN $remainder {
          RELATE $first->to->$counterpart;
      };
      fn::relate_all($remainder);
  }
};

CREATE person:1, person:2, person:3, person:4, person:5, person:6, person:7;

fn::relate_all((SELECT VALUE id FROM person));

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (custom_function_name)
          (param_list
            (variable_name)
            (type
              (parameterized_type
                (type_name)
                (type
                  (type_name)))))
          (block
            (expressions
              (expression
                (subquery_statement
                  (if_statement
                    (keyword_if)
                    (value
                      (binary_expression
                        (value
                          (path
                            (base_value
                              (variable_name))
                            (path_element
                              (subscript
                                (identifier)
                                (argument_list)))))
                        (operator)
                        (value
                          (base_value
                            (number
                              (int))))))
                    (block
                      (comment))
                    (else_clause
                      (keyword_else)
                      (block
                        (expressions
                          (expression
                            (subquery_statement
                              (let_statement
                                (keyword_let)
                                (variable_name)
                                (value
                                  (path
                                    (base_value
                                      (variable_name))
                                    (path_element
                                      (filter
                                        (value
                                          (base_value
                                            (number
                                              (int)))))))))))
                          (semi_colon)
                          (expression
                            (subquery_statement
                              (let_statement
                                (keyword_let)
                                (variable_name)
                                (value
                                  (function_call
                                    (function_name)
                                    (argument_list
                                      (value
                                        (base_value
                                          (variable_name)))
                                      (value
                                        (base_value
                                          (number
                                            (int))))))))))
                          (semi_colon)
                          (expression
                            (subquery_statement
                              (for_statement
                                (keyword_for)
                                (variable_name)
                                (keyword_in)
                                (value
                                  (base_value
                                    (variable_name)))
                                (block
                                  (expressions
                                    (expression
                                      (subquery_statement
                                        (relate_statement
                                          (keyword_relate)
                                          (relate_subject
                                            (variable_name))
                                          (relate_subject
                                            (identifier))
                                          (relate_subject
                                            (variable_name)))))
                                    (semi_colon))))))
                          (semi_colon)
                          (expression
                            (value
                              (function_call
                                (custom_function_name)
                                (argument_list
                                  (value
                                    (base_value
                                      (variable_name)))))))
                          (semi_colon))))))))))))
    (semi_colon)
    (expression
      (subquery_statement
        (create_statement
          (keyword_create)
          (create_target
            (value
              (base_value
                (record_id
                  (object_key)
                  (record_id_value
                    (int)))))
            (value
              (base_value
                (record_id
                  (object_key)
                  (record_id_value
                    (int)))))
            (value
              (base_value
                (record_id
                  (object_key)
                  (record_id_value
                    (int)))))
            (value
              (base_value
                (record_id
                  (object_key)
                  (record_id_value
                    (int)))))
            (value
              (base_value
                (record_id
                  (object_key)
                  (record_id_value
                    (int)))))
            (value
              (base_value
                (record_id
                  (object_key)
                  (record_id_value
                    (int)))))
            (value
              (base_value
                (record_id
                  (object_key)
                  (record_id_value
                    (int)))))))))
    (semi_colon)
    (expression
      (value
        (function_call
          (custom_function_name)
          (argument_list
            (value
              (base_value
                (sub_query
                  (expression
                    (subquery_statement
                      (select_statement
                        (select_clause
                          (keyword_select)
                          (keyword_value)
                          (predicate
                            (value
                              (base_value
                                (identifier)))))
                        (from_clause
                          (keyword_from)
                          (value
                            (base_value
                              (identifier))))))))))))))
    (semi_colon)))

=========================
Using the FULL permission
=========================

DEFINE FUNCTION fn::fetchAllProducts() {
	RETURN (SELECT * FROM product LIMIT 10);
} PERMISSIONS FULL;

RETURN fn::fetchAllProducts();

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (custom_function_name)
          (param_list)
          (block
            (expressions
              (expression
                (subquery_statement
                  (return_statement
                    (return_clause
                      (keyword_return)
                      (value
                        (base_value
                          (sub_query
                            (expression
                              (subquery_statement
                                (select_statement
                                  (select_clause
                                    (keyword_select)
                                    (inclusive_predicate))
                                  (from_clause
                                    (keyword_from)
                                    (value
                                      (base_value
                                        (identifier)))
                                    (limit_clause
                                      (keyword_limit)
                                      (number
                                        (int))))))))))))))
              (semi_colon)))
          (permissions_basic_clause
            (keyword_permissions)
            (keyword_full)))))
    (semi_colon)
    (expression
      (subquery_statement
        (return_statement
          (return_clause
            (keyword_return)
            (value
              (function_call
                (custom_function_name)
                (argument_list)))))))
    (semi_colon)))

================================
Define using the NONE permission
================================

DEFINE FUNCTION fn::fetchAllPaymentDetails() {
	RETURN (SELECT stored_cards.expiry_year FROM payment_details LIMIT 5);
} PERMISSIONS NONE;

RETURN fn::fetchAllPaymentDetails();

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (custom_function_name)
          (param_list)
          (block
            (expressions
              (expression
                (subquery_statement
                  (return_statement
                    (return_clause
                      (keyword_return)
                      (value
                        (base_value
                          (sub_query
                            (expression
                              (subquery_statement
                                (select_statement
                                  (select_clause
                                    (keyword_select)
                                    (inclusive_predicate
                                      (predicate
                                        (value
                                          (path
                                            (base_value
                                              (identifier))
                                            (path_element
                                              (subscript
                                                (identifier))))))))
                                  (from_clause
                                    (keyword_from)
                                    (value
                                      (base_value
                                        (identifier)))
                                    (limit_clause
                                      (keyword_limit)
                                      (number
                                        (int))))))))))))))
              (semi_colon)))
          (permissions_basic_clause
            (keyword_permissions)
            (keyword_none)))))
    (semi_colon)
    (expression
      (subquery_statement
        (return_statement
          (return_clause
            (keyword_return)
            (value
              (function_call
                (custom_function_name)
                (argument_list)))))))
    (semi_colon)))

======================
Using the WHERE clause
======================

DEFINE FUNCTION fn::fetchAllProducts() {
	RETURN (SELECT * FROM product LIMIT 10);
} PERMISSIONS WHERE $auth.admin = true;


RETURN fn::fetchAllProducts();

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (custom_function_name)
          (param_list)
          (block
            (expressions
              (expression
                (subquery_statement
                  (return_statement
                    (return_clause
                      (keyword_return)
                      (value
                        (base_value
                          (sub_query
                            (expression
                              (subquery_statement
                                (select_statement
                                  (select_clause
                                    (keyword_select)
                                    (inclusive_predicate))
                                  (from_clause
                                    (keyword_from)
                                    (value
                                      (base_value
                                        (identifier)))
                                    (limit_clause
                                      (keyword_limit)
                                      (number
                                        (int))))))))))))))
              (semi_colon)))
          (permissions_basic_clause
            (keyword_permissions)
            (where_clause
              (keyword_where)
              (value
                (binary_expression
                  (value
                    (path
                      (base_value
                        (variable_name))
                      (path_element
                        (subscript
                          (identifier)))))
                  (operator)
                  (value
                    (base_value
                      (keyword_true))))))))))
    (semi_colon)
    (expression
      (subquery_statement
        (return_statement
          (return_clause
            (keyword_return)
            (value
              (function_call
                (custom_function_name)
                (argument_list)))))))
    (semi_colon)))

==============================================
Create a FUNCTION if it does not already exist
==============================================

DEFINE FUNCTION IF NOT EXISTS fn::example() {};

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (if_not_exists_clause
            (keyword_if)
            (keyword_not)
            (keyword_exists))
          (custom_function_name)
          (param_list)
          (block))))
    (semi_colon)))

=====================================================
Create an FUNCTION and overwrite if it already exists
=====================================================

DEFINE FUNCTION OVERWRITE fn::example() {};

---

(source_file
  (expressions
    (expression
      (subquery_statement
        (define_function_statement
          (keyword_define)
          (keyword_function)
          (keyword_overwrite)
          (custom_function_name)
          (param_list)
          (block))))
    (semi_colon)))
